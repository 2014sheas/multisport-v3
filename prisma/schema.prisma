generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  password                String?
  isAdmin                 Boolean                  @default(false)
  isScorekeeper           Boolean                  @default(false)
  emailVerified           Boolean?                 @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  playerId                String?                  @unique
  image                   String?
  accounts                Account[]
  emailVerificationTokens EmailVerificationToken[]
  games                   Game[]                   @relation("GameScorekeeper")
  sessions                Session[]
  player                  Player?                  @relation(fields: [playerId], references: [id])

  @@map("users")
}

model Player {
  id             String        @id @default(cuid())
  name           String
  eloRating      Int           @default(5000)
  gamesPlayed    Int           @default(0)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  experience     Int?
  wins           Int?
  draftPicks     DraftPick[]
  eloHistory     EloHistory[]
  eventRatings   EventRating[]
  teamMembers    TeamMember[]
  captainedTeams Team[]        @relation("TeamCaptain")
  user           User?
  votesAsCut     Vote[]        @relation("VoteCut")
  votesAsKeep    Vote[]        @relation("VoteKeep")
  votesAsTrade   Vote[]        @relation("VoteTrade")

  @@index([name])
  @@index([eloRating], map: "players_elo_rating_idx")
  @@index([isActive], map: "players_is_active_idx")
  @@map("players")
}

model Team {
  id                     String                  @id @default(cuid())
  name                   String
  captainId              String?
  eloRating              Int                     @default(5000)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  color                  String                  @default("#3B82F6")
  abbreviation           String?
  logo                   String?
  year                   Int?                    @default(2025)
  draftPicks             DraftPick[]
  gamesAsTeam1           Game[]                  @relation("Team1Games")
  gamesAsTeam2           Game[]                  @relation("Team2Games")
  members                TeamMember[]
  captain                Player?                 @relation("TeamCaptain", fields: [captainId], references: [id])
  tournamentParticipants TournamentParticipant[]

  @@index([captainId, id], map: "teams_captain_id_idx")
  @@index([year])
  @@map("teams")
}

model TeamMember {
  teamId   String
  playerId String
  joinedAt DateTime @default(now())
  year     Int?     @default(2025)
  player   Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, playerId])
  @@index([playerId], map: "team_members_player_id_idx")
  @@index([playerId, teamId], map: "team_members_player_team_idx")
  @@index([teamId], map: "team_members_team_id_idx")
  @@index([year])
  @@map("team_members")
}

model Event {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  abbreviation      String
  eventType         EventType
  finalStandings    Json?
  location          String?
  points            Int[]
  startTime         DateTime?
  status            EventStatus        @default(UPCOMING)
  symbol            String
  duration          Int?
  combinedTeamData  Json?
  year              Int?               @default(2025)
  eloHistory        EloHistory[]
  eventRatings      EventRating[]
  games             Game[]
  tournamentBracket TournamentBracket?
  votes             Vote[]

  @@index([year])
  @@map("events")
}

model Game {
  id            String     @id @default(cuid())
  eventId       String
  team1Id       String?
  team2Id       String?
  team1Score    Int?
  team2Score    Int?
  status        GameStatus @default(SCHEDULED)
  scheduledTime DateTime?
  location      String?
  scorekeeperId String?
  completedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  year          Int?       @default(2025)
  event         Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scorekeeper   User?      @relation("GameScorekeeper", fields: [scorekeeperId], references: [id])
  team1         Team?      @relation("Team1Games", fields: [team1Id], references: [id])
  team2         Team?      @relation("Team2Games", fields: [team2Id], references: [id])

  @@index([eventId])
  @@index([team1Id])
  @@index([team2Id])
  @@index([status])
  @@index([year])
  @@map("games")
}

model DraftPick {
  id             String   @id @default(cuid())
  teamId         String
  playerId       String?
  round          Int
  pickNumber     Int
  tradedToTeamId String?
  createdAt      DateTime @default(now())
  player         Player?  @relation(fields: [playerId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])

  @@map("draft_picks")
}

model EloHistory {
  id        String   @id @default(cuid())
  playerId  String
  oldRating Int
  newRating Int
  timestamp DateTime @default(now())
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([eventId], map: "elo_history_event_id_idx")
  @@index([playerId], map: "elo_history_player_id_idx")
  @@index([playerId, timestamp, eventId], map: "elo_history_player_timestamp_event_idx")
  @@index([playerId, timestamp], map: "elo_history_player_timestamp_idx")
  @@index([timestamp])
  @@map("elo_history")
}

model Vote {
  id           String   @id @default(cuid())
  voterSession String
  timestamp    DateTime @default(now())
  cutId        String
  keepId       String
  tradeId      String
  eventId      String?
  cutPlayer    Player   @relation("VoteCut", fields: [cutId], references: [id])
  event        Event?   @relation(fields: [eventId], references: [id])
  keepPlayer   Player   @relation("VoteKeep", fields: [keepId], references: [id])
  tradePlayer  Player   @relation("VoteTrade", fields: [tradeId], references: [id])

  @@index([eventId], map: "votes_event_id_idx")
  @@index([timestamp])
  @@map("votes")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model EventRating {
  id          String   @id @default(cuid())
  playerId    String
  eventId     String
  rating      Int      @default(5000)
  gamesPlayed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, eventId])
  @@index([eventId], map: "event_ratings_event_id_idx")
  @@index([eventId, rating(sort: Desc)], map: "event_ratings_event_rating_idx")
  @@index([playerId], map: "event_ratings_player_id_idx")
  @@index([rating])
  @@map("event_ratings")
}

model TournamentBracket {
  id           String                  @id @default(cuid())
  eventId      String                  @unique
  status       TournamentStatus        @default(SEEDING)
  winnerId     String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  event        Event                   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  winner       TournamentParticipant?  @relation("TournamentWinner", fields: [winnerId], references: [id])
  matches      TournamentMatch[]
  participants TournamentParticipant[]

  @@map("tournament_brackets")
}

model TournamentParticipant {
  id                  String              @id @default(cuid())
  tournamentBracketId String
  teamId              String
  seed                Int?
  isEliminated        Boolean             @default(false)
  eliminationRound    Int?
  finalPosition       Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  wonTournaments      TournamentBracket[] @relation("TournamentWinner")
  matchesAsTeam1      TournamentMatch[]   @relation("Team1")
  matchesAsTeam2      TournamentMatch[]   @relation("Team2")
  team                Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tournamentBracket   TournamentBracket   @relation(fields: [tournamentBracketId], references: [id], onDelete: Cascade)

  @@unique([tournamentBracketId, teamId])
  @@index([tournamentBracketId, seed])
  @@map("tournament_participants")
}

model TournamentMatch {
  id                  String                 @id @default(cuid())
  tournamentBracketId String
  round               Int
  matchNumber         Int
  isWinnersBracket    Boolean
  winnerId            String?
  score               Json?
  status              MatchStatus            @default(SCHEDULED)
  scheduledTime       DateTime?
  location            String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  team1Id             String?
  team2Id             String?
  team1FromMatchId    String?
  team1IsWinner       Boolean?
  team2FromMatchId    String?
  team2IsWinner       Boolean?
  team1FromMatch      TournamentMatch?       @relation("Team1FromMatch", fields: [team1FromMatchId], references: [id])
  feedsIntoMatches    TournamentMatch[]      @relation("Team1FromMatch")
  team1               TournamentParticipant? @relation("Team1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2FromMatch      TournamentMatch?       @relation("Team2FromMatch", fields: [team2FromMatchId], references: [id])
  feedsIntoMatches2   TournamentMatch[]      @relation("Team2FromMatch")
  team2               TournamentParticipant? @relation("Team2", fields: [team2Id], references: [id], onDelete: Cascade)
  tournamentBracket   TournamentBracket      @relation(fields: [tournamentBracketId], references: [id], onDelete: Cascade)

  @@unique([tournamentBracketId, round, matchNumber, isWinnersBracket])
  @@index([tournamentBracketId, round])
  @@index([tournamentBracketId, isWinnersBracket])
  @@map("tournament_matches")
}

model Year {
  id          String   @id @default(cuid())
  year        Int      @unique
  isActive    Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("years")
}

enum EventType {
  TOURNAMENT
  SCORED
  COMBINED_TEAM
}

enum EventStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
}

enum TournamentStatus {
  SEEDING
  BRACKET_GENERATED
  IN_PROGRESS
  COMPLETED
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  UNDETERMINED
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  UNDETERMINED
}
