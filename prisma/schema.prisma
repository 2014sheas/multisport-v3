generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  password                String?
  isAdmin                 Boolean                  @default(false)
  emailVerified           Boolean?                 @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  playerId                String?                  @unique
  image                   String?
  accounts                Account[]
  emailVerificationTokens EmailVerificationToken[]
  sessions                Session[]
  player                  Player?                  @relation(fields: [playerId], references: [id])

  @@map("users")
}

model Player {
  id             String       @id @default(cuid())
  name           String
  eloRating      Int          @default(5000)
  gamesPlayed    Int          @default(0)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  experience     Int?
  wins           Int?
  draftPicks     DraftPick[]
  eloHistory     EloHistory[]
  teamMembers    TeamMember[]
  captainedTeams Team[]       @relation("TeamCaptain")
  user           User?
  votesAsCut     Vote[]       @relation("VoteCut")
  votesAsKeep    Vote[]       @relation("VoteKeep")
  votesAsTrade   Vote[]       @relation("VoteTrade")
  eventRatings   EventRating[]

  @@map("players")
}

model Team {
  id           String       @id @default(cuid())
  name         String
  abbreviation String?
  captainId    String?
  eloRating    Int          @default(5000)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  color        String       @default("#3B82F6")
  draftPicks   DraftPick[]
  members      TeamMember[]
  captain      Player?      @relation("TeamCaptain", fields: [captainId], references: [id])

  @@map("teams")
}

model TeamMember {
  teamId   String
  playerId String
  joinedAt DateTime @default(now())
  player   Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, playerId])
  @@map("team_members")
}

model Event {
  id             String   @id @default(cuid())
  name           String
  abbreviation   String
  symbol         String   // emoji
  eventType      EventType
  status         EventStatus @default(UPCOMING)
  startTime      DateTime?
  location       String?
  points         Int[]    // array of points for each place
  finalStandings Json?    // JSON array of team IDs in final order
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  eventRatings   EventRating[]
  votes          Vote[]
  eloHistory     EloHistory[]

  @@map("events")
}

enum EventType {
  TOURNAMENT
  SCORED
}

enum EventStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
}

model DraftPick {
  id             String   @id @default(cuid())
  teamId         String
  playerId       String?
  round          Int
  pickNumber     Int
  tradedToTeamId String?
  createdAt      DateTime @default(now())
  player         Player?  @relation(fields: [playerId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])

  @@map("draft_picks")
}

model EloHistory {
  id        String   @id @default(cuid())
  playerId  String
  oldRating Int
  newRating Int
  timestamp DateTime @default(now())
  eventId   String?
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@map("elo_history")
}

model Vote {
  id           String   @id @default(cuid())
  voterSession String
  timestamp    DateTime @default(now())
  cutId        String
  keepId       String
  tradeId      String
  eventId      String?
  cutPlayer    Player   @relation("VoteCut", fields: [cutId], references: [id])
  keepPlayer   Player   @relation("VoteKeep", fields: [keepId], references: [id])
  tradePlayer  Player   @relation("VoteTrade", fields: [tradeId], references: [id])
  event        Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@map("votes")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model EventRating {
  id        String   @id @default(cuid())
  playerId  String
  eventId   String
  rating    Int      @default(5000)
  gamesPlayed Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([playerId, eventId])
  @@map("event_ratings")
}
